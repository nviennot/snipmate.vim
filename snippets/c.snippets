# main()
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet mainn
	int main(void)
	{
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #include <linux/...>
snippet linc
	#include <linux/${1:stdio}.h>${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Ternary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
# Function
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Function Declaration
snippet fund
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
# This is kind of convenient
snippet .
	[${1}]${2}
# GPL
snippet gpl
	/*
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, write to the Free Software
	 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
	 *
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */
	
	${2}
# Kernel stuff
snippet un
	unsigned
snippet ts
	struct task_struct *
snippet dsp
	struct scribe_ps *${1:scribe};
snippet sp
	struct scribe_ps *${2:scribe} = ${1:current}->scribe;
snippet dsc
	struct scribe_context *${1:ctx};
snippet sc
	struct scribe_context *${2:ctx} = ${1:scribe}->ctx;
snippet sl
	spin_lock(&${1:lock});
	spin_unlock(&$1);
snippet se
	struct scribe_event_${1} *event;
snippet procfile
	#include <linux/seq_file.h>
	#include <linux/proc_fs.h>

	static int ${1:subsys}_proc_show(struct seq_file *seq, void *offset)
	{
		seq_printf(seq, "hello proc\n");
		return 0;
	}

	static int $1_proc_open(struct inode *inode, struct file *file)
	{
		return single_open(file, $1_proc_show, PDE(inode)->data);
	}
	
	static ssize_t $1_proc_write(struct file *file, const char __user * buffer, size_t count, loff_t * ppos)
	{
		const unsigned int len = ${2:maxinput};
		char strbuf[len + 1];
	
		/* Don't write more than max input length, but please write something */
		if (count > len || count == 0)
			return -EFAULT;
	
		if (copy_from_user(strbuf, buffer, count))
			return -EFAULT;
	
		strbuf[count] = '\0';

		/* TODO: parse strbuf */

		return count;
	}
	
	static const struct file_operations $1_proc_fileops = {
		.owner = THIS_MODULE,
		.open = $1_proc_open,
		.read = seq_read,
		.write = $1_proc_write,
		.llseek = seq_lseek,
		.release = single_release,
	};
	
	static __init int $1_proc_init(void)
	{
		struct proc_dir_entry *entry;
	
		entry = proc_create("${3:my_proc_file_name}", 0, NULL, &$1_proc_fileops);
		if (!entry)
			return -ENOMEM;
		return 0;
	}
	
	__initcall($1_proc_init);
snippet vcpu
	struct kvm_vcpu *vcpu
